   Android Programming Week 3 Android Programming Professor Kijun Han, Department of Computer Science and Engineering, Hansung University HANSUNG UNIVERSITY Android HANSUNG Programming UNIVERSITY Week 3 Android Programming Professor Kijun Han, Department of Computer Science and Engineering, Hansung University Android Programming JAVA grammar for Android HANSUNG UNIVERSITY Android HANSUNG Programming UNIVERSITY JAVA grammar for Android JAVA features Java History ♥ In 1991, James Gosling of Sun Microsystems (acquired by Oracle) began research using the C language as a model. In 1995, JDK (Java Development Kit) 1.0 was announced. ♥ In 1997, Java took the form of a complete programming language with the release of JDK 1.1. Characteristics of ① Concise syntax ② Clear object-oriented language ③ Highly portable and machine-neutral ④ Supports distributed processing ⑤ Multi-threaded language HANSUNG UNIVERSITY 3 JAVA Features HANSUNG UNIVERSITY History of Java ♥ Sun Microsystems in 1991 ( Acquired by Oracle ) James Gosling began research using the C language as a model In 1995, JDK (Java Development Kit) 1.0 was announced ♥ In 1997, JDK 1.1 was released, taking the form of a complete programming language Characteristics of Java ① Concise syntax ② Clear Object-oriented language Highly portable and machine-neutral ③ Supports distributed processing ④ ⑤ Multi-threaded language 3 How to write a JAVA program Traditional writing method of a Java program √ Write Java code in notepad and save it as *.java Save javac.exe When compiled using vjava.exe, a *.class file is created. Execute the compiled *.class file using vjava.exe → Most developers develop Java in an Eclipse environment. HANSUNG UNIVERSITY 4 How to write a JAVA program HANSUNG UNIVERSITY Java program Traditional writing method √ Java code in notepad After writing, save it as *.java to create a *.class file. Compile using javac.exe. Run the compiled *.class file. Use vjava.exe → Developers mostly use Java development in an Eclipse environment. 4 Variables and data Example of formal variable declaration Example 3-2 exam02.java 2 3 4. 1 public class exam02 { public static void main(String args[]) { int var1 = 10; float var2 = 10.1f; 5 double var3 = 10.2; 6 char var4 = ''; 7 String vars = "Android: 8 System.out.println(var1); 9 System.out.println(var2); 10 System.out.println(var3); 11 System.out.println(var4); 12 System. out.println(var5); 13 ) 14) 10 10.1 10.2 Android HANSUNG UNIVERSITY data type variable and ' HANSUNG UNIVERSITY variable declaration example Example 3-2 exam02.java 1 public class exam02 { 10 public static main void ( String args [ ] ) { 2 10.1 int var2 = 10.1f ; 4 . double var3 = ' ' ; Android : 7 System.out.println (var1) 8 System.out.println(var2); 9 System.out.println(var3); 10 System.out.println(var4); 11 System.out.println(var5); 12 13 ) 14 ) Variables and data types Basic data types commonly used in Java Table 3-1 Data types commonly used in Java Data type description char character type String byte Uses 2 bytes and only inputs one Korean or English character A string of multiple characters It uses input bytes, inputs from -128 to +127, uses short 2 bytes, inputs from -32768 to 32767, uses integer 4 bytes, inputs from about -2.1 billion to +2.1 billion, uses long 8 bytes, and can input up to a fairly large score. float Uses 4 bytes and inputs a real number Real number type double Boolean type Boolean Uses 8 bytes and inputs a real number Higher precision than float Enter true or false HANSUNG UNIVERSITY b Variables and data types HANSUNG UNIVERSITY Basic data types commonly used in Java Table 3 -1 Data type mainly used in Java Data type description Uses 2 bytes and inputs only one Korean or English character char character type Enters a string of multiple characters String Uses byte and inputs from -128 to + 127 byte Uses 2 bytes and inputs from -32768 to -32768 Input up to 32767. Uses short integer type of 4 bytes and inputs from about -2.1 billion to +2.1 billion. Int uses 8 bytes and can input up to a fairly large score. Long uses 4 bytes and inputs real numbers. Uses float real number type of 8 bytes and inputs real numbers than float. High precision double Enter true or false Boolean type boolean b Conditional statement if statement ♡Decide what action to take depending on whether the condition is true or false } if (conditional expression) ( // Execute this part when the conditional expression is true if( Conditional expression) ( // Execute this part when the conditional expression is true } else { // Execute this part when the conditional expression is false } HANSUNG UNIVERSITY conditional statement HANSUNG UNIVERSITY if statement ♡ Determines what action to take depending on whether the condition is true or false. if (conditional expression) ( // Execute this part when the conditional expression is true } if (conditional expression) ( // Execute this part when the conditional expression is true } else { // Execute this part when the conditional expression is false } Conditional statement switch()~ case ♡Decide what action to take depending on various cases switch(value) ( case value1: // if value, execute this part break; case value 2: // If value 2, execute this part break; default: // If nothing applies, execute this part break; } HANSUNG UNIVERSITY 8 Conditional statement HANSUNG UNIVERSITY switch () ~ case ♡ Decides what action to take depending on various cases switch (value) (case value 1 // If value, execute this part break;: case value 2 // value If 2, execute this part ; break default // If nothing applies, execute this part break ; } 8 'Conditional statement if, switch() ~ case 3-3 exam03.java 1 public class exam 3 ( 2 3 4 5 6 public static void main(String args[]) { int count = 85; if (count >= 90) ( System.out.println("if: ()); else if (count >= 60) ( System.out.println( "if: a); } else { System.out.println("if: ***) Statement 1f: Pass switch: 7 8 9 18 1 11 12 int Junsu (count/10) 10:
13 switch (jumsu) (14 case 100:
15 case 90:
16 System.out.println("switch: ()); 17 break; 18 case 80:
19 case 70:
20 cases 68:
21 22 23 24 System.out.println("switch: a); break; default: System.out.println("switch: "); 25 1 26
271 HANSUNG UNIVERSITY if , switch ( ) ~ case ' Conditional statement HANSUNG UNIVERSITY 3-3 exam03.java 1 public class exam 3 ( 1f statement: Pass public static void main (String args [ ]) { 2 switch : int count = 85 ; 3 if ( count >= 90 ) ( 4 System.out.println ( " if : ( ) ) ; 5 else if ( count >= 60 ) ( 6 System.out.println ( " if : a ) ; 7 } else { 8 System.out.println ( " if : *** ) 9 18 1 11 int Junsu ( count / 10 ) 10 : 12 switch ( jumsu ) ( 13 : 14 case 100 : 15 case 90 System.out.println ( " switch : ( ) ) ; 16 break ; 17 : 18 case 80 19 case 70 : : 20 case 68 System.out.println ( " switch : a ) ; 21 22 break ; default : 23 System.out.println ( " switch : " ) ; 24 25 1 26 271 Array Array ♥Used to store multiple data in one variable Two-dimensional array: two[3][4] One-dimensional array: one[4] 10 20
100 [0] [1] [2] [3] [0][0][0][1][0][2][0][3] [1][0] [1] [1] [ 1] [2] [1] [3] 200 [2][0] [2] [1] [2] [2] [2] [3] Figure 3-5 Array concept HANSUNG UNIVERSITY 10 array HANSUNG UNIVERSITY array ♥ Used to store multiple data in one variable Two-dimensional array: two [3] [4] One-dimensional array: one [4] 10 20 100 [0] [0] [0] [1] [0] [2] [ 0 ] [ 3 ] [ 0 ] [ 1 ] [ 2 ] [ 3 ] [ 1 ] [ 0 ] [ 1 ] [ 1 ] [ 1 ] [ 2 ] [ 1 ] [ 3 ] 200 [ 2 ] [ 0 ] [ 2 ] [ 1 ] [ 2 ] [ 2 ] [ 2 ] [ 3 ] Figure 3-5 Array concept 10 Array One-dimensional array int one[] = new int[4] one[0] = 10; one[3] = 20; Two-dimensional array int two[][] = new int[3][4]; two[0][0]= 100; two[2][3] = 200; HANSUNG UNIVERSITY 11 array HANSUNG UNIVERSITY one-dimensional array int one [ ] = new int [ 4 ] one [ 0 ] = 10 ; 20 ; one [ 3 ] = two-dimensional array int two [ ] [ ] = new int [ 3 ] [ 4 ] ; two [ 0 ] [ 0 ] = 100 ; two [ 2 ] [ 3 ] = 200 ; 11 Array Assigning values directly while declaring an array int three[] = { 1, 2, 3 }; Checking the array size ✓ Use ‘array.length’ HANSUNG UNIVERSITY 12 Array HANSUNG UNIVERSITY Immediately assign values while declaring an array int three [ ] = { 1 , 2 , 3 } ; Check array size Use 'array .length' ✓ 12 Loop for statement ♥ An essential element of programming along with conditional statements } for (initial expression: conditional expression: increase/decrease expression) ( // Repeat this part Format of for statement that supports arrays ♥ After the contents of the array are assigned to variables one by one, the inside of the for statement is executed ♡ In the end, the for statement is repeated as many times as the number of arrays for (variable type variable: array name) ( // Use variables in this part 1 HANSUNG UNIVERSITY 13 Loop statement HANSUNG UNIVERSITY for statement ♥ It is an essential element of programming along with conditional statements for (initial expression: conditional expression: increase/decrease expression) ( // Repeat this part } Format of for statement that supports arrays ♥ After the contents of the array are assigned to variables one by one, for The inside of the statement is executed ♡ In the end, the for statement is repeated as many times as the number of arrays. Perform this part } HANSUNG UNIVERSITY 14 Loop HANSUNG UNIVERSITY while statement while (conditional expression) ( // Perform this part while the conditional expression is true } 14 Loop: for, while 3-4 exam04.java 1 public class exam04 ( public static void main (String args[]) { one 2 3 int onell new int[3]: 4 5 for (int i=0; i < one .length; i++) { one[1] = 10 + 1; * String two (* ****); for (String str two) [ System.out.println(str); 12 13 14 15 16 17 18 19) while(j < one length) { System .out.println(one[j]); 10 20 HANSUNG UNIVERSITY 15 Loop: for , while HANSUNG UNIVERSITY 3-4 exam04.java 1 public class exam04 (one public static void main (String args [ ]) { 2 int onell new int [ 3 ] : 3 * for ( int i = 0 ; i < one . length ; i ++ ) { 4 one [ 1 ] = 10 + 1 ; 5 10 20 String two ( ***** ) ; 8 for ( String str two ) [ 9 System.out.println ( str ) ; 10 11 } 12 int j = 0 13 ; while ( j < one length ) { 14 System.out.println ( one [ j ] ) ; 15 16 17 18 19 ) 15 Exception handling try-catch √ Java handles errors that occur during program execution through the try-catch statement 03-6 exam06.java 1 public class exam06 { static int var = 100; public static void main(String args[]) { int num1 =100, num2 = 0; 2 3 4 5 6 7 } 8 9 try { System.out.println(num1/num2); catch (java.lang.Arithmetic Exception e) { System.out.println(" "); There is a problem with your calculations. 10 } 11 } 12} HANSUNG UNIVERSITY 16 Exception Handling HANSUNG UNIVERSITY try - catch √ Java handles errors that occur during program execution through the try - catch statement 03-6 exam06.java 1 public class exam06 { There is a problem with the calculation. static int var = 100 ; 2 public static void main ( String args [ ] ) { 3 int num1 = 100 , num2 = 0 ; 4 { try 5 System.out.println ( num1 / num2 ) ; 6 7 } catch ( java.lang.Arithmetic Exception e ) { 8 System.out.println ( " " ) ; 9 10 } } 11 12 } 16 'Exception handling try~catch in Android Android uses a lot of auto-completion for exception handling 'Surround with try/catch' FileOutputStream outFs openFileOutput("file.txt",2); Unhandled exception type FileNotFoundException 1 quick fix available: Surround with try/catch try { FileOutputStream outFs openFileOutput("file.txt",2); } catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); Press 'F2' for focus } HANSUNG UNIVERSITY 17 ' Exception handling HANSUNG UNIVERSITY try catch in Android ~ In Android, auto-completion is widely used in exception handling 'Surround with try / catch' FileOutputStream outFs openFileOutput (" file.txt ", 2) ; try { FileOutputStream outFs openFileOutput ( " file.txt " , 2 ) ; Unhandled exception type FileNotFoundException } catch ( FileNotFoundException e ) { available : quick fix 1 catch block // TODO Auto - generated Surround with try / catch e.printStackTrace ( ) ; Press ' F2 ' for focus } 17 Operators Operators mainly used in JAVA Table 3-2 Java operators mainly used Operator Description +- % is an arithmetic operator that calculates the remainder. It can be attached to the front of a variable or formula using the sign operator. Assign to left and right using the assignment operator. Increase or decrease by 1. As a comparison operator, the result is true or false and is mainly used in conditional expressions of statements or loops && || It means and or as a logical operator. &1.1~ Use the bitwise operator to perform and or exclusive of not operations in bit units. + (data type) Shift operator, moves left or right bit by bit. As a compound assignment operator, 'a=b' is equivalent to 'aatb'. The data format is forcibly converted using the cast operator. For example, int a = (int) 35 The double value of 3.5 is forcibly converted to int type and assigned to a. In the end, 301 is substituted. HANSUNG UNIVERSITY 18 Operators HANSUNG UNIVERSITY Operators mainly used in JAVA Table 3-2 Java operators mainly used Operator Description As an arithmetic operator, % calculates the remaining value. It can be added in front of variables and formulas using the sign operator. - Assign from right to left using the + assignment operator. Increase or decrease by 1 . As a comparison operator, the result is true or false. It is mainly used in conditional expressions of statements or loops. It is a logical operator and means and or. && || & 1.1 ~ Use the bitwise operator to perform and or exclusive of not operations on a bit-by-bit basis. With the shift operator, it moves left or right bit by bit. As a compound assignment operator, 'a = b' is equivalent to 'aatb'. The data type is forcibly converted using the + cast operator. For example, int a = (int) 35 The double type 3.5 (data type) value is forcibly converted to int type and assigned to a. In the end, 301 is assigned to 18 "Operator Cast operator √ In Android programming, it is also used quite a lot in forced type conversion of class-type data √ Example of use of cast operator in Android programming Converting View class type to Button type Button button1; button1= (Button) findViewById (R.id.btn1); HANSUNG UNIVERSITY 19 " Operator HANSUNG UNIVERSITY Cast operator √ It is also widely used in Android programming for forced type conversion of class type data √ Example of use of cast operator in Android programming Converting View class type to Button type Button button1 ; button1 = ( Button ) findViewById ( R.id.btn1 ) ; 19 'Class definition and instance creation Object-Oriented Programming (OOP) ♥ Programming techniques used in Java, C++, C#, etc. Class = Variable (field) + Method Class field Car color Car speed Method Know the current speed View () Speed up () Speed down () Find out the current color () Figure 3-6 Type of class Multiple prints (a) Concept of class and instance Instance Car1= new Car class(): Car2 = new Car class(): Carn= new Car class(): (b) Classes and instances of car objects HANSUNG UNIVERSITY 20 ' Class definition and instance creation HANSUNG UNIVERSITY Object-Oriented Programming (OOP) ♥ Java, C + + programming techniques used in C#, etc. Instance classes Class (class) = Variable (field) + Method Multiple printing (a) Concept of class and instance Car color Car 1 = new Car class (): Field Car speed Car 2 = new Car class (): Find out the current speed ( ) Speed up ( ) Method Speed down ( ) Car n = new Car class ( ): Find out the current color ( ) (b) Class and instance of car object Figure 3-6 Class format 20 'Class definition and instance creation HANSUNG UNIVERSITY Code implementation of Car class 03-7 Carjava-717 1 public class Car 2 String color: 3 int speed 8:
4 5 int getSpeed() { 6 return speed: 7 F 8 9 18 11 void upSpeed(int value) { if (speed + value >= 288) speed = 288:
12 else 13 speed speed + value; 14 J 15 16 17 18 19 20 void downSpeed(int value) { if (speed value (9) speed=0; else speed speed-value; 21 22 23 String getColor() { 24 return color; 25 26) 21 ' class Definition and Instance Creation HANSUNG UNIVERSITY Code Implementation of Car Class 03-7 Carjava - 717 1 public class Car 2 String color : int speed 8 : 3 4 int getSpeed ( ) { 5 6 speed : return 7 F 8 void upSpeed ( int value ) { 9 18 if ( speed + value > = 288 ) 11 speed = 288 : 12 else 13 speed speed + value ; 14 J 15 16 void downSpeed ( int value ) { if ( speed value ( 9 ) 17 18 speed = 0 ; 19 else 20 speed speed - value ; 21 22 String getColor ( ) { 23 24 return color ; 25 26 ) 21 'class Definition and instance creation Car instance creation example 3-8 exam07.java 1 public class exam@7 { public static void main(String args[]) { 3 CarmyCar1newCar(); 4 myCart.color = "Red 5 myCar1.speed - 8:
6 The car's color is red and its speed is 50 km. The car's color is blue and its speed is 8 km. The car's color is green, and its speed is 288 km/h. 7 CarmyCar2 = new Car(); 8 myCar2.color=" 9 myCar2.speed = 0; 18 11 12 myCar3.color": 13 14 15 16 17 18 Car myCar3 new Car(); myCar 3.speed=0; myCar1.up Speed(58); System.out.println("The car's color is + myCart.getColor() + *, and its speed is + myCart.getSpeed()+"km." 19 20 myCar2.downSpeed(28); 21 {{ middle omitted myCar2 Content output) 22 myCar3.up Speed (258) 23 Omitted (my Car3 content output 24 1 25) HANSUNG UNIVERSITY 22 Instance creation class definition and 'HANSUNG UNIVERSITY car instance creation exam07.java Example 3-8 1 public class exam @ 7 { public static void main (String args []) { CarmyCar1newCar (); 3 myCart.color = "Red The car's color is red and its speed is 50 km. 4 myCar1.speed - 8: The car's color is blue and its speed is 8 km. 5 The color of the car is green and its speed is 288 km. 6 7 CarmyCar2 = new Car ( ) ; 8 myCar2.color = " 0 ; myCar2.speed = 9 18 Car myCar3 new Car ( ) ; 11 myCar3.color " : 12 myCar 3.speed = 0 ; 13 14 Speed ( 58 ) ; myCar1.up 15 System.out.println ( "The car's color is + myCart.getColor () 16 17 + *, and its speed is + myCart.getSpeed () + "km." 18 19 myCar2.downSpeed (28); 20 21 { { output myCar2 content omitted) myCar3.up Speed (258) 22 23 omitted middle (output my Car3 content 24 1 25) 22 Constructor Creating an instance with a constructor √ Add the constructor code to Carjava in [Example 3-7] Example 3-9 Carjava-Constructor addition 1 public class Car | String color: 2 3 int speed: 4 5 6 7 8 Car(String color, int speed) | this.color-color: this.speed-speed: Omit middle( Same as 5 or less in [Example 3-7]) √ Change the contents of myCar1, myCar2, and myCar3 using the Car class in [Example 3-8] Example 3-10 exam07 java-modify 1 public class exam07{ public static void main (String args[]) { 2 3 Car myCart new Car("#"); 4 Car myCar2 new Car(**); 5 Car myCar3 = new Car(green) 6 7 15 in [Example 3-8] Type (same as below) HANSUNG UNIVERSITY 23 Constructor Creating an instance with the HANSUNG UNIVERSITY constructor Example 3-9 Carjava- Adding a constructor √ Add constructor code to Carjava in [Example 3-7] 1 public class Car color: String 2 int speed: 3 4 Car (String color, int speed) | 5 this.color - color: 6 this.speed - speed: 7 8 Intermediate omitted (same as 5 or less in [Example 3-7]) √ Car in [Example 3-8] Example of changing the contents of myCar1, myCar2, and myCar3 using classes 3-10 exam07 java- Modify 1 public class exam07 { public static void main (String args []) { 2 Car myCart new Car ("#"); 3 Car myCar2 new Car ( ** ) ; 4 Car myCar3 = new Car (green) 5 6 7 Middle omitted Same as type 15 and below in [Example 3-8]) 23 Method overloading ♥ Even if the name of the method is the same within the class, multiple methods are declared as long as the number of parameters or data type is different. Possible method overloading example 3-11 Carjava - Add method overloading 1 public class Car ( String color: int speed; Car(String color, int speed){ 3 4 5 6 7 8 J 9 this.color = color: this.speedspeed: Car(int speed) { this.speed speed: 12 1 Car() { 1 16 17 Omitted (same as type 5 and below in [Example 3-7]) HANSUNG UNIVERSITY 24 7 Method overloading HANSUNG UNIVERSITY Method overloading ♥ Within the class Even if the name of the method is the same, multiple declarations are possible as long as the number of parameters or data type is different. Example 3-11 Carjava- Add method overloading 1 public class Car (String color: int speed; 3 4 Car (String color, int speed) { 5 this .color = color : 6 this.speedspeed : 7 J 8 9 Car ( int speed ) { this.speed speed : 1 12 Car ( ) { 1 16 Middle omitted (same as type 5 and below in [Example 3-7]) 17 7 24 Static field, static method, constant field Static field ♥ Variable used in the class itself Static method √ Use by adding static in front of the method ♥ Call with ‘class name ()’ without an instance. Constant field used ♡ Enter the initial value in the static field and add final in front HANSUNG UNIVERSITY 25 Static field, static method, constant field HANSUNG UNIVERSITY Static field ♥ Variable used in the class itself Static method √ Method Use by adding static in front ♥ 'Class name' without instance. Constant field used by calling method name ( ) ' ♡ Enter the initial value in the static field and add final in front 25 Static field, static method, constant field HANSUNG UNIVERSITY 2 3 4 Example 3-12 Car.java-Add static component 1 public class Car { String color: int speed: static int carCount = 0; 5 final static int MAXSPEED = 200; final static int MINSPEED = 0; 7 8 static int currentCarCount(){ 9 return carCount; 10 } 11 12 Car(String color, int speed){ 13 14 15 this.color = color: this.speed = speed: carCount ++; 16 } 17 18 Middle omitted (same as 10 or less in [Example 3-11]) 26 Static field, static method, constant field HANSUNG UNIVERSITY Example 3-12 Car.java- Add static component 1 public class Car { String color : 2 int speed : 3 4 static int carCount = 0 ; 5 final static int MAXSPEED = 200 ; final static int MINSPEED = 0 ; 7 currentCarCount static int ( ) { 8 return carCount ; 9 } 10 11 Car ( String color , int speed ) { 12 this.color = color : 13 this.speed = speed : 14 15 carCount ++ ; 16 } 17 Omit the middle (same as 10 or less in [Example 3-11]) 18 26 Add static field, static method, constant field static component Example 3-13 exam08.java 1 import java.lang.Math; 2 3 4 5 public class exam08 { CarmyCar1 = new Car("Red", 0); public static void main(String args[]) { Number of cars produced (static field)==> 3 Number of cars produced (static method)=3 Maximum speed limit of cars > 200 Value of PI ==> 3.141592653589793 3 5th power = 243.8 6 Car myCar2 = new Car("Blue", 0); 7 Car myCar3 = new Car("Green", 0); 8 9 System.out.println("Number of cars produced (static field) ==>"+Car.carCount); 10 System.out.println("Number of cars produced (static method)==>"+Car.currentCarCount()); 11 System.out.println("Maximum speed limit of the car => Car.MAXSPEED); 12 13 System.out.println("Value of PI==> + Math.PI); 14 System.out.println(*3 to the 5th power ==>"+ Math.pow(3,5)); 15} 16) HANSUNG UNIVERSITY 27 Static fields, static methods, constant fields HANSUNG UNIVERSITY Example of adding static components 3 -13 exam08.java 1 import java.lang.Math; Number of cars produced (static field) == > 3 2 Number of cars produced (static method) = 3 3 public class exam08 { Maximum speed limit > 200 cars public static void main (String args [ ]) { 4 value of PI == > 3.141592653589793 CarmyCar1 = new Car ("red", 0); 5 3 to the power of 5 = 243.8 Car myCar2 = new Car ("blue", 0) 6 7 Car myCar3 = new Car ( " Green " , 0 ) ; 8 System.out.println ( " Number of cars produced ( static field ) == > " + Car.carCount ) ; " Number of cars produced ( static method ) == > " + Car.currentCarCount ( ) ) ; System.out.println ( " Maximum speed limit of cars = > 11 12 System.out.println ( " value of PI == > + Math.PI ) ; 13 System.out.println ( * 3 to the power of 5 == > " + Math.pow ( 3,5 ) ) ; 14 15 } 16 ) 27 'Class inheritance and Overriding class inheritance √ Inheriting an existing class as is and additionally defining necessary fields or methods ♥ Super class (or parent class) → Car class ☞ Subclass (or child class) → Car class and Truck Class Car Class Car Color Car Speed Get Current Speed() Method Speed Up Speed Down() Get Current Color() Inheritance Three Speed Passenger Car Class Truck Class World of Car Class Fields of Car Class Field World Number of Car Seats of Car Class Method Find out the number of seats in the car class (Increase speed) - Overriding Figure 3-7 Concept of class inheritance Learn about load capacity () HANSUNG UNIVERSITY 28 'Class inheritance and overriding HANSUNG UNIVERSITY Class inheritance (inheritance) √ Inherit the existing class as is Additional definition of necessary fields or methods while receiving ♥ Super class (super class, or parent class) → Car class ☞ Subclass (subclass, or child class) → Car class and truck class Car class Car color Car speed Find out the current speed ( ) Speed up method Speed down ( ) Find out the current color ( ) Inheritance Three speed passenger car class Truck class World of the car class Field of the car class World Number of seats in the car Class Method in the car class Find out the number of seats Find out the load capacity ( ) Increasing speed) - Overriding Figure 3-7 Concept of class inheritance 28 'Class inheritance and overriding Example of changing the passenger car class to Java code 03-14 Automobile java 1 public class Automobile extends Car ( 2 int seatNum; 3 4 int getSeatNum() { 5 return seatNum: 6 } 7 8 void upSpeed(int value) { 9 if (speed value > 300) 10 speed 300:
11 else 12 speed speed +(int) value: 13 14) HANSUNG UNIVERSITY 29 'Class inheritance and overriding HANSUNG UNIVERSITY Example of changing passenger car class to Java code 03-14 Automobile java 1 public class Automobile extends Car (int seatNum; 2 3 int getSeatNum ( ) { 4 seatNum : 5 return 6 } 7 void upSpeed ( int value ) { 8 if ( speed value > 300 ) 9 300 : 10 speed 11 else value : speed speed + ( int ) 12 13 14 ) 29 ' Example of changing class inheritance and overriding subclasses to Java code Example 3-15 exam09.java 1 public class exam09 ( public static void main(String args[]) { Automobile auto = new Automobile(); 2 3 4 5 6 7 8 9 } auto.upSpeed(250); System.out.println("The speed of the car is " + auto.getSpeed()+"km. "); The speed of the car is 250km. Example of changing an overriding HANSUNG UNIVERSITY subclass to Java code Example 3-15 exam09.java 1 public class exam09 (The speed of the car is 250 km. public static void main (String args []) { 2 Automobile auto = new Automobile ( ) ; 3 4 auto.upSpeed ( 250 ) ; 5 The speed of the car is " System.out.println ( " 6 ) ; auto.getSpeed ( ) + " km . " + 7 8 9 } 30 'Abstract class and abstract method HANSUNG UNIVERSITY Abstract class ♥ Class that prohibits instantiation √ Use abstract in front of the method Abstract method ♥ Method without method body ♥ Use abstract in front of the method ♥ Use abstract method The containing class must be designated as an abstract class ☞ Overriding an abstract method is called ‘implementing an abstract method’ 31 ‘Abstract class and abstract method HANSUNG UNIVERSITY Abstract (abstract) class ♥ Class that prohibits instantiation √ Used by writing abstract in front of the method Abstract method ♥ Method without method body ♥ Used by writing abstract in front of the method ♥ The class containing the abstract method must be designated as an abstract class ☞ Overriding the abstract method implements the abstract method (implement) ' Notice 31 'Abstract class and abstract method Schematic that makes the animal class an abstract class and includes the abstract method 'Move()' abstract animal class field animal name method abstract move(): Inheritance Inheritance Tiger class Eagle class Animal class Field of Eagle Class Field + Field + Tiger Age Eagle Habitat Method Move ( ) → Overriding Method Move ( ) → Overriding Figure 3-8 Concept of abstract class inheritance HANSUNG UNIVERSITY 32 ' Abstract class and abstract method HANSUNG UNIVERSITY A schematic that makes the Animal class an abstract class and includes the abstract method 'Move ()' abstract Animal class Animal name field abstract Move (): Method Inheritance Inheritance Tiger class Eagle class Field of Eagle class Field of Animal class Field Field + + Eagle habitat age tiger moves ( ) → Overriding moves ( ) → Overriding method Method Figure 3-8 Concept of abstract class inheritance 32 Implementing 'Abstract class and abstract method HANSUNG UNIVERSITY [Figure 3-8] with code 03-16 Animaljava 1 abstract class Animal ( 2 3 4) String name; abstract void move(); 03-17 Tiger.java 1 class Tiger extends Animal ( 2 int age: 3 void move() { 4 System.out.println(" "); 03-18 Eagle.java 1 class Eagle extends Animal ( String home; 2 3 void move() ( 4 System.out.println("OCH"); 5 61 33 ' Implementing abstract class and abstract method HANSUNG UNIVERSITY [Figure 3-8] with code 03-16 Animaljava 1 abstract class Animal ( String name ; 2 abstract void move ( ) ; 3 ) 4 03-17 Tiger.java class Tiger extends Animal ( 1 int age : 2 3 void move ( ) { 4 System.out.println ( " " ) ; 03-18 Eagle.java 1 class Eagle extends Animal ( String home ; 2 void move ( ) ( 3 System.out.println ( " OCH " ) ; 4 5 61 33 'Example 3 of implementing abstract classes and abstract methods [Figure 3-8] with code -19 exam10.java 1 public class exam10 ( 2 3 public static void main(String args[])( 5 6 7 8 1 91 Tiger tigert - new Tiger(); Eagle eaglet - new Eagle(); tiger1.move() eaglet.move(); Move on all fours. Move with wings. HANSUNG UNIVERSITY 34 'Implementing abstract class and abstract method HANSUNG UNIVERSITY [Figure 3-8] with code Example 3-19 exam10.java 1 public class exam10 Moves on all fours . public static void main ( String args [ ] ) ( Moves on 2 wings . Tiger tigert - new Tiger ( ) ; 3 Eagle eaglet - new Eagle ( ) ; 5 tiger1.move ( ) 6 eaglet.move ( ) ; 7 8 1 91 34 Polymorphism of class variables Polymorphism ♥ Instances created in one’s own subclass can also be assigned to class variables Example 3-20 exam11.java 1 public class exam11 ( public static void main(String args []) { Animal animal; animal = new Tiger(); animal.move(); 7 8 animal = new Eagle(); 10 1 11} Move with wings 35 13 Polymorphism HANSUNG UNIVERSITY of class variables Polymorphism ♥ An instance created in one's own subclass can also be assigned to a class variable Example 3-20 exam11.java 1 public class exam11 (Move on all fours public static void main ( String args [ ]) { Move with wings Animal animal = new Tiger ( ) ; animal.move ( ) ; Anonymous inner class Anonymous inner class ‘nameless’ inner class ♡Used for classes that are used only once and discarded Example 3-22 exam13.java 1 interface clickListener( public void print(); 2 3) 4 5 public class exam13 ( 8 9 10 10 public static void main(String args[]) { clickListener listener = (new clickListener() ( public void print(){ 11 12 12 13 14 15 16 1 17) System.out.println( Click listener. listener.print(); It is a click listener. HANSUNG UNIVERSITY 36 Inner class Anonymous 'HANSUNG UNIVERSITY Anonymous inner class (Anonymous inner class) 'Unnamed' inner class ♡ Used for a class that is used only once and discarded Example 3-22 exam13.java 1 interface clickListener (Click Listener public void print ( ) ; 2 3 ) 4 5 public class exam13 ( public static void main ( String args [ ] ) { clickListener listener = 8 ( new clickListener ( ) ( 9 10 public void print ( ) { 10 System. out.println (Click listener. 11 12 12 13 14 listener.print (); 15 16 1 17) 36 Package Package ♥ As the number of classes and interfaces increases, management becomes difficult, so manage them by grouping them in packages ・[New]- Select [Package] ▼ Specify the package that will contain the user-created class in the first line of the *.java file package Package name: New Package Java Package Create a new lave package Creates folders conponding to package Source folger Projec NA Figure 3-9 Cancel HANSUNG UNIVERSITY 37 Package HANSUNG UNIVERSITY Package ♥ As the number of classes and interfaces increases, it becomes difficult to manage them, so manage them by grouping them into packages ・ Select [New] - [Package] ▼ The package that will contain the class created by the user is *. Specify package in the first line of the java file Package name: New Package Java Package Create a new lave package Creates folders conponding to package Source folger Projec NA Cancel Figure 3-9 Package creation 37 'Generics Generics √ Data format safety Used for <String> as well as 〈Integer〉, 〈Double>, and user-defined class types ArrayList strlist = new ArrayList(); strList.add("First"); strList.add(second) strList.add(3); ArrayList<String> strlist = new ArrayList<String>(); strList.add("First"); strList.add(second); strList.add(3); HANSUNG UNIVERSITY 38 ' Generics HANSUNG UNIVERSITY Generics √ Used to ensure data type safety Used not only for <String> but also for 〈Integer〉, 〈Double>, and user-defined class types ArrayList strlist = new ArrayList () ; strList.add ( " first " ) ; strList.add (second) strList.add (3); ArrayList < String > strlist = new ArrayList < String > ( ) ; strList.add ( " first " ) ; strList.add(second); strList.add(3); 38 'Data type conversion, string comparison, date format Data type conversion ♥ For data type conversion, use the static method of the class provided by Java instead of the casting operator int a = Integer.parseInt("100"); double b Double.parseDouble("100.123"); String Comparison ♥ To compare strings, use the equals() method of the String class String str = "Hello"; if (str.equals((String)"Hello")) { } //If the strings are the same, perform here HANSUNG UNIVERSITY 39 ' Data type conversion, string comparison, date format HANSUNG UNIVERSITY Data type conversion ♥ Casting operator for data type conversion Instead, use the static method of the class provided by Java int a = Integer.parseInt("100"); double b Double.parseDouble ( " 100.123 " ) ; String Comparison ♥ To compare strings, use the equals () method of the String class String str = "Hello"; if (str.equals ((String) "Hello")) { // If the strings are equal, do this } 39 'Data format conversion, string comparison, date format Date format ♥ Use the DateFormat class to express dates ☞ Inherit it Using the received SimpleDateFormat, expressions such as 'year, month, day' or 'hour, minute, second' are possible. Date now = new Date(); SimpleDateFormat sFormat; sFormat=new SimpleDateFormat("yyyyMMdd"); System.out.println(sFormat.format(now)); // Output in 20121131 format sFormat = new SimpleDateFormat("HH:mm:ss"); System.out.println(sFormat.format(now)); // Output in 23:15:21 format HANSUNG UNIVERSITY 40 'Data format conversion, string comparison, date format HANSUNG UNIVERSITY Date format ♥ Use the DateFormat class to express dates ☞ If you use SimpleDateFormat, which inherits it, you can use 'year, month, day' or ' Expressions such as 'hour, minute, and second' are possible. Date now = new Date (); SimpleDateFormat sFormat ; sFormat = new SimpleDateFormat ( " yyyyMMdd " ) ; System.out.println ( sFormat.format ( now ) ) ; // Output in 20121131 format sFormat = new SimpleDateFormat ("HH:mm:ss"); System.out.println ( sFormat.format ( now ) ) ; // Output in 23:15:21 format 40